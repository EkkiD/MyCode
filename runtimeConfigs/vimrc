" .vimrc
" Notes: you are suggested to see
"        http://vimdoc.sourceforge.net/htmldoc/options.html
"        for more information.

" multi-bytes characters support, for example CJK support:
"set fileencodings=ucs-bom,utf-8,cp936,big5,euc-jp,euc-kr,gb18030,latin1

set tabstop=4       " Number of spaces that a <Tab> in the file counts for.
 
set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.
 
set expandtab       " Use the appropriate number of spaces to insert a <Tab>.
                    " Spaces are used in indents with the '>' and '<' commands
                    " and when 'autoindent' is on. To insert a real tab when
                    " 'expandtab' is on, use CTRL-V <Tab>.
set pastetoggle=<F2>
 
set smarttab        " When on, a <Tab> in front of a line inserts blanks
                    " according to 'shiftwidth'. 'tabstop' is used in other
                    " places. A <BS> will delete a 'shiftwidth' worth of space
                    " at the start of the line.
 
set showcmd         " Show (partial) command in status line.
 
set showmatch       " When a bracket is inserted, briefly jump to the matching
                    " one. The jump is only done if the match can be seen on the
                    " screen. The time to show the match can be set with
                    " 'matchtime'.
set number          "show numbers

                    "
set matchtime=1     " How many 10ths of a second to show match for
 
set hlsearch        " When there is a previous search pattern, highlight all
                    " its matches.
 
set incsearch       " While typing a search command, show immediately where the
                    " so far typed pattern matches.
 
set ignorecase      " Ignore case in search patterns.
 
set smartcase       " Override the 'ignorecase' option if the search pattern
                    " contains upper case characters.
 
set backspace=indent,eol,start " Influences the working of <BS>, <Del>, CTRL-W
                    " and CTRL-U in Insert mode. This is a list of items,
                    " separated by commas. Each item allows a way to backspace
                    " over something.
 
set autoindent      " Copy indent from current line when starting a new line
                    " (typing <CR> in Insert mode or when using the "o" or "O"
                    " command).
 
set smartindent     " Do smart autoindenting when starting a new line. Works
                    " for C-like programs, but can also be used for other
                    " languages.
 
"set textwidth=79    " Maximum width of text that is being inserted. A longer
                    " line will be broken after white space to get this width.
 
set formatoptions=c,q,r,t " This is a sequence of letters which describes how
                    " automatic formatting is to be done.
                    "
                    " letter    meaning when present in 'formatoptions'
                    " ------    ---------------------------------------
                    " c         Auto-wrap comments using textwidth, inserting
                    "           the current comment leader automatically.
                    " q         Allow formatting of comments with "gq".
                    " r         Automatically insert the current comment leader
                    "           after hitting <Enter> in Insert mode. 
                    " t         Auto-wrap text using textwidth (does not apply
                    "           to comments)
 
set ruler           " Show the line and column number of the cursor position,
                    " separated by a comma.
 
set background=dark " When set to "dark", Vim will try to use colors that look
                    " good on a dark background. When set to "light", Vim will
                    " try to use colors that look good on a light background.
                    " Any other value is illegal.
                    "
" ---------------------------------------------------------------------------
"  Highlighting
":match ErrorMsg /\%>80v.\+/


" ---------------------------------------------------------------------------
" Pathogen setup

call pathogen#infect()

" ----------------------------------------------------------------------------
" Syntastic

:let g:syntastic_auto_jump=1
:let g:syntastic_check_on_open=1
:let g:syntastic_auto_loc_list=1
:let g:syntastic_mode_map = { 'mode': 'active',
                               \ 'passive_filetypes': ['html', 'python', 'cpp'] }

" ----------------------------------------------------------------------------
" Local VIMrc

:let g:localvimrc_sandbox=0


" ----------------------------------------------------------------------------
" status line
:set statusline=%F%m%r%h%w 
:set statusline+=%#warningmsg#
:set statusline+=%{SyntasticStatuslineFlag()}
:set statusline+=%{fugitive#statusline()}
:set statusline+=%*
:set laststatus=2
 
" ----------------------------------------------------------------------------
"  mouse settings
set mouse=a         " Enable the use of the mouse.
set mousehide       " Hide the mouse while typing

"----------------------------------------------------------------------------
" remove highlights from text
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

"----------------------------------------------------------------------------
" navigate tabs
nnoremap <tab> :tabnext<CR>
nnoremap <S-tab> :tabprev<CR>

" let ; be a :, and ;; be ; in normal mode
map ; :
nnoremap ;; ;
nnoremap t :tabnew 

nnoremap <C-q> :mksession .vimsesh <CR> :qa

map <CR> o<Esc>k

" Make the mouse paste unformatted block of code
map <MouseMiddle> <esc>"*p  

map Y y$

filetype plugin on
filetype indent on

set ofu=syntaxcomplete#Complete

syntax on

autocmd! bufwritepost vimrc source ~/.vimrc

cmap w!! %!sudo tee > /dev/null %

command H FSHere
map H :FSHere<CR>

"confiugure tags

set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl

map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q . && cscope -R -b<CR>

"OmniCPPComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_NamespaceSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

nmap <F4> :w<CR>:make<CR>:cw<CR>


"----------------------------------------------------------------------------
" Functions for session saving and restoration
"

function! SaveSess()
    execute 'mksession!' . getcwd() . '/.session.vim'
endfunction

"if there were no args to vim and the file is readable
function! RestoreSess()
    if argc() == 0 && filereadable(getcwd() . '/.session.vim') 
        execute 'source' getcwd() . '/.session.vim'
        if bufexists(1)
            for l in range(1, bufnr('$'))
                if bufwinnr(l) == -1
                    exec 'sbuffer ' . l
                endif
            endfor
        endif
    endif    
endfunction

autocmd VimLeave * call SaveSess()
autocmd VimEnter * call RestoreSess()

